# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    helm.sh/chart: {{ include "myapp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: jupyter
  name: {{ .Release.Name }}-jupyter

spec:
  type: {{ .Values.service.type }}
  ports:
    - port: 8888
      targetPort: 8888
      {{- if ( eq  .Values.service.type "NodePort" ) }}
      nodePort: {{ .Values.service.nodeport.jupyter }}
      {{- end }}
  selector:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: jupyter
...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "myapp.fullname" . }}-jupyter
  labels:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    helm.sh/chart: {{ include "myapp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: jupyter

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "myapp.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: jupyter
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "myapp.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: jupyter
    spec:
      containers:
        - name: jupyter
          image: "{{ (.Values.image.jupyter.registry | default .Values.imageDefaults.registry) }}/\
                  {{ (.Values.image.jupyter.namespace | default .Values.imageDefaults.namespace) }}/\
                  {{ .Values.image.jupyter.name }}\
                  :{{ .Values.image.jupyter.tag | default "latest" }}"
          imagePullPolicy: {{ (.Values.image.jupyter.pullPolicy | default .Values.imageDefaults.pullPolicy) | default (ternary "Always" "IfNotPresent" ( hasSuffix "SNAPSHOT" (.Values.image.jupyter.tag | default "latest" )))  }}
          envFrom:
            - configMapRef:
                name: {{ include "myapp.fullname" . }}-configmap
          env:
            - name: corePlatformURL
              value: "https://{{ .Release.Name }}-core:9443"
            - name: dataLakePlatformURL
              value: "https://{{ .Release.Name }}-datalake:9443"
            - name: devPlatformURL
              value: "https://{{ .Release.Name }}-dev:9443"
            - name: ctsPlatformURL
              value: "https://{{ .Release.Name }}-dev:9443"
            - name: factoryPlatformURL
              value: "https://{{ .Release.Name }}-factory:9443"
            - name: eventBusURLroot
              value: "{{ .Release.Name }}-strimzi-kafka-bootstrap:9092"
            - name: uiExternalURL
              value: "{{ .Release.Name }}-nginx:443"
            - name: repositoryType
              value: {{ .Values.egeria.repositoryType}}
            - name: CHOWN_HOME
              value: "yes"
            - name: CHOWN_HOME_OPTS
              value: "-R"
            - name: GEN_CERT
              value: "YES"
            - name: DOCKER_STACKS_JUPYTER_CMD
              value: "lab --notebook-dir=/home/jovyan/work"
            # If value specified, we will checkout this tag if it exists
            {{ if .Values.jupyter.gitTagForNotebooks }}
            - name: GIT_TAG_NOTEBOOKS
              value: {{ .Values.jupyter.gitTagForNotebooks }}
            {{ end }}
            # If value not passed, a password will be generated, otherwise get from configmap (and must exist)
            {{ if .Values.jupyter.tokenSecret }}
            - name: JUPYTER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.jupyter.tokenSecret }}
                  key: password
                  optional: false
            {{ else if .Values.jupyter.tokenPlain }}
            - name: JUPYTER_TOKEN
              value: {{ .Values.jupyter.tokenPlain }}
            {{ end }}
            # Contains the truststore from Egeria self-signed certs, in .pem format
            #- name: REQUESTS_CA_BUNDLE
            #  value: "/home/jovyan/ssl/truststore.pem"
          ports:
            - containerPort: 8888
          readinessProbe:
            tcpSocket:
              port: 8888
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 6
          volumeMounts:
            - mountPath: /home/jovyan/work
              name: jupyter-work
            - name: notebook-scripts-vol
              mountPath: "/usr/local/bin/before-notebook.d"
            #- name: ssl-vol
            #  mountPath: "/home/jovyan/ssl"
          resources: {}
      volumes:
        - name: notebook-scripts-vol
          configMap:
            name: {{ .Release.Name }}-scripts-configmap
        #- name: ssl-vol
        #  configMap:
        #    name: {{ .Release.Name }}-ssl-configmap
        - name: jupyter-work
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-jupyter-pvc
      restartPolicy: Always
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-jupyter-pvc
  labels:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    helm.sh/chart: {{ include "myapp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: jupyter
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.jupyter.storageSize | default "1Gi" }}
{{ if .Values.egeria.storageClass }}
  storageClassName: {{ .Values.jupyter.StorageClass }}
{{ end }}
...
